<?php
/* vim: set expandtab tabstop=4 shiftwidth=4: */
//
// +----------------------------------------------------------------------+
// | Inline_C                                                             |
// +----------------------------------------------------------------------+
// | Copyright (c) 1997-2003 The PHP Group                                |
// +----------------------------------------------------------------------+
// | This source file is subject to version 2.02 of the PHP license,      |
// | that is bundled with this package in the file LICENSE, and is        |
// | available at through the world-wide-web at                           |
// | http://www.php.net/license/2_02.txt.                                 |
// | If you did not receive a copy of the PHP license and are unable to   |
// | obtain it through the world-wide-web, please send a note to          |
// | license@php.net so we can mail you a copy immediately.               |
// +----------------------------------------------------------------------+
// | Authors: George Schlossnagle <george@omniti.com>                     |
// |          Andrei Zmievski <andrei@gravitonic.com>                     |
// +----------------------------------------------------------------------+
//
// $Id$
//

require 'Var_List.php';

define('DEFAULT_TYPEMAP', 'default.tm');

/**
* Inline::Inline_C
*
* Purpose:
*
*   Allows for definitions of functions in C inline in php code.
*
* Example:
*   a)
*     require_once 'Inline/Inline_C.php';
*     $inline = new Inline_C;
*     
*    $function1 = <<<EOF
*    PHP_FUNCTION(times) 
*    {
*        long i,j;
*        if (zend_parse_parameters(ZEND_NUM_ARGS()  TSRMLS_CC, "ll", &i,&j) == FAILURE) {
*            WRONG_PARAM_COUNT;
*        }
*        RETURN_LONG(i*j);
*    }
*    $inline = new Inline_C;
*    $inline->add_code($function1);
*    $inline->compile();
*    for($i=0;$i<10;$i++) {
*        for($j=0; $j<10; $j++) {
*            print "$i * $j = ".times($i,$j)."\n";
*        }
*    }
*
*   b)
*     require_once 'Inline/Inline_C.php';
*     $inline = new Inline_C;
*     
*    $function2 = <<<EOF
*    include "foo.h"
*    PHP_FUNCTION(foo) 
*    {
*        char *str, *out_str;
*        int str_len, out_str_len;
*        if (zend_parse_parameters(ZEND_NUM_ARGS()  TSRMLS_CC, "s", &str,&str_len) == FAILURE) {
*            WRONG_PARAM_COUNT;
*        }
*        foo(&out_str,&str);
*        out_str_len = strlen(out_str);
*        RETURN_STRINGL(out_str, out_str_len, 0);
*    }
*    EOF
*    $inline = new Inline_C;
*    $inline->add_code($function1);
*    $inline->library("foo", "/usr/local/foo/lib");
*    $inline->include("/usr/local/foo/include");
*    $inline->compile();
*    for($i=0;$i<10;$i++) {
*        for($j=0; $j<10; $j++) {
*            print "$i * $j = ".times($i,$j)."\n";
*        }
*    }
*     
* @author       George Schlossangle <george@omniti.com>
* @version      $Revision$
* @access       public
*/


class Inline_C {
    /**
    * Creates a C PHP extension on the fly, compiles, caches and dl()'s it.
    *
    * @access public
    */

    var $glue_text;
    var $build_dir = "@inline_c_builddir@";
    var $makefile_template = "@inline_c_builddir@/Makefile.tmpl";
    var $func_text;
    var $shared_libadd = array();
    var $preprocessor_text;
    var $typemap = array();

    /**
    * Constructor.  
    *
    * @access public
    */

    function Inline_C() 
    {
        $this->load_typemap(DEFAULT_TYPEMAP);

        // We set glue_text (the extension header), since we seem to 
        // have problems using a heredoc in the default attribute setting.
        $this->glue_text = <<<EOF
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"

%s

%s

function_entry __MD5NAME___functions[] = {
    /* __function_entries_here__ */
%s
    {NULL, NULL, NULL}      /* Must be the last line in extname_functions[] */
};
zend_module_entry __MD5NAME___module_entry = {
#if ZEND_MODULE_API_NO >= 20010901
    STANDARD_MODULE_HEADER,
#endif
    "__MD5NAME__",
    __MD5NAME___functions,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
#if ZEND_MODULE_API_NO >= 20010901
    "0.1", /* Replace with version number for your extension */
#endif
    STANDARD_MODULE_PROPERTIES
};

ZEND_GET_MODULE(__MD5NAME__)

EOF;
}

    /**
    * Adds code to the preproceesor staanza in our extension.
    * Used for adding #includes or such
    *
    * @param string $code       code to add
    * @access public
    */

    function add_preproccesor($code)
    {
        $this->preprocessor_text .= $code;
    }
    
    /**
    * Adds code to our extension.
    * 
    * @param string $code       code to add
    * @access public
    */

    function add_code($code) 
    {
        $this->func_text .= $code;
    }
    
    /**
    * Adds a library to the link line.  
    *
    * @param string $library    library to link against
    * @param string $path       optional library path, defaults to NULL
    * @access public
    */

    function library($library, $path = null) 
    {
        $this->shared_libadd[] = "-l$library";
        if ($path) {
            $this->shared_libadd[] = "-L$path";
        }
    }
    
    /**
    * Adds a library path to the link line
    *
    * @param string $path       library path
    * @access public
    */

    function library_path($path) 
    {
        $this->shared_libadd[] = "-L$path";
    }
    
    /**
    * Adds an include path to the link line
    *
    * @param string $path       include path
    * @access public
    */

    function include_path($path) 
    {
        $this->shared_libadd[] = "-I$path";
    }

    function load_typemap($file)
    {
        if (!is_file($file)) {
            trigger_error("Cannot read typemap $file", E_USER_WARNING);
            return;
        }
        $typemap = file_get_contents($file);

        preg_match_all(',^([\w\s*]+) \[ \s*
                         to   \s* \[ \s* ([^]]*) \s* \] \s*
                         from \s* \[ \s* ([^]]*) \s* \] \s*
                         spec \s* \[ \s* ([^]]*) \s* \] \s*
                         \]\s*$,smx', $typemap, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
			if (empty($match[4])) {
				trigger_error("Type(s) $match[1] have an empty spec field in typemap $file, not loading\n");
				continue;
			}
            $types = preg_split(',\s+,', $match[1], -1, PREG_SPLIT_NO_EMPTY);
            foreach ($types as $type) {
                $this->typemap[$type]['to']   = str_replace('$type', $type, $match[2]);
                $this->typemap[$type]['from'] = str_replace('$type', $type, $match[3]);
                $this->typemap[$type]['spec'] = $match[4]{0};
            }
        }
    }

    /**
     * Bind the code automatically. The code will be scanned for function
     * definitions and the corresponding PHP glue functions will be generated.
     *
     * @param string C code to be bound
     * @access public
     */
    function bind($code)
    {
        $funcs = $this->_findFunctionDefs($code);

        $this->func_text .= "\n" . $code . "\n";
        foreach ($funcs as $name => $func) {
            $this->func_text .= $this->_generateFunc($func);
        }
    }

    /**
    * Compile and load our code!
    *
    * @param string $module_name optional module name.  If not
    *   specified, the md5 hash of the extension body will be
    *   used.
    * @access public
    */

    function compile($module_name = null) 
    {
        $fd = fopen($this->makefile_template, "r");
        $makefile_text = fread ($fd, filesize ($this->makefile_template));
        fclose($fd);

        preg_match_all("/PHP_FUNCTION\((\w+)\)/", $this->func_text, $matches);
        $functions = array_unique($matches[1]);
        foreach ($functions as $funcname) {
            $function_entry_stanza .= "\tPHP_FE($funcname, NULL)\n";
            $function_proto_stanza .= "PHP_FUNCTION($funcname);\n";
        }
        $body = sprintf($this->glue_text, $this->preprocessor_text,$function_proto_stanza, $function_entry_stanza).$this->func_text;
        if ($module_name) {
            $md5 = $module_name;
        }
        else {
            $md5 = md5($body);
        }
        if (!($extension_dir = ini_get("extension_dir")) || ($extension_dir == './')) {
            $extension_dir = $this->build_dir;
        }
        $extension_dir .= "/inline_libs";
        if (!is_file("$extension_dir/inline_$md5.so")) {
            $body = str_replace("__MD5NAME__", "inline_$md5", $body);
            $makefile_text = str_replace("__MD5NAME__", "inline_$md5", $makefile_text);
            $makefile_text = str_replace("__SHARED_LIBADD__", join(" ",$this->shared_libadd), $makefile_text);
            $mkfd = fopen("$this->build_dir/Makefile", "w"); 
            fwrite($mkfd, $makefile_text);
            fclose($mkfd);
            $gluefd = fopen("$this->build_dir/inline_$md5.c", "w");
            fwrite($gluefd, $body);
            fclose($gluefd);
            chdir($this->build_dir);
            exec('make');
            copy("modules/inline_$md5.so", "$extension_dir/inline_$md5.so");
            exec('make clean');
        }
        if (!($extension_dir = ini_get("extension_dir")) || ($extension_dir == './')) {
            $cwd = getcwd();
            chdir($this->build_dir);
            dl("inline_libs/inline_$md5.so");
            chdir($cwd);
        } else {
            dl("inline_libs/inline_$md5.so");
        }
    }

    function _findFunctionDefs($source)
    {
        $source = $this->_cleanSource($source);

        preg_match_all(',^\s*
                        ([\w\s*]+\s*)
                        \s+
                        (\w+)\s*\(\s*
                        (.*?)\s*\)
                        \s*\{,mx', $source, $matches, PREG_SET_ORDER);

        $funcs = array();

        foreach ($matches as $match) {
            $name = $match[2];
            $funcs[$name]['name'] = $name;
            $funcs[$name]['return'] = $match[1];
            $funcs[$name]['args'] = array();
            preg_match_all('!([\w\s*]+)\s+([\w+])[\s,]*!', $match[3], $args, PREG_SET_ORDER);
            foreach ($args as $arg) {
                $funcs[$name]['args'][] = array('type' => $arg[1],
                                                'name' => $arg[2]);
            }
        }

        return $funcs;
    }

    function _cleanSource($source)
    {
        $search = array(',/\*.*?\*/,s',
                        ',\\\\\s*\n,',
                        ',^#.*?$,m',
                        ',^(typedef|struct|enum) [\w\s]+ ( \{ ( (?>[^{}]+) | (?2))* \} )? .*? ;\s*,smx',
                        ',\s+,m',
                        ',(};|[;}])\s*,m',
                        ',\s+([*&]+)\s*(\w+),'
                       );
        $replace = array('', '', '', '', ' ', "$1\n", '$1 $2');

        return preg_replace($search, $replace, $source);
    }

    function _generateFunc($func)
    {
		$spec_format = '';
		$arg_list = array();
		$parse_list = array();
		$var_list = new Var_List();

        ob_start();

		foreach ($func['args'] as $args) {
			$type_info = @$this->typemap[$args['type']];
			if (!isset($type_info)) {
				trigger_error("Unknown type '$args[type]', skipping function $func[name]\n");
				return;
			}

			switch ($type_info['spec']) {
				case 's':
					$var_list->add($args['type'], $args['name']);
					$var_list->add('int', $args['name'] . '_lEn');
					$arg_list[] = $args['name'];
					$parse_list[] = '&' . $args['name'];
					$parse_list[] = '&' . $args['name'] . '_lEn';
					break;

				default:
					$var_list->add($args['type'], $args['name']);
					$arg_list[] = $args['name'];
					$parse_list[] = '&' . $args['name'];
					break;
			}

			$spec_format .= $type_info['spec'];
		}

		echo "PHP_FUNCTION($func[name])\n{\n";

		if ($func['return'] != 'void') {
			$retval_name = $func['name'] .'_'.  'retval';
			$var_list->add($func['return'], $retval_name);
		}

		echo $var_list->to_string();
		$parse_list_string = implode(', ', $parse_list);
		$arg_list_string = implode(', ', $arg_list);

		echo <<<EOD
    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "$spec_format", $parse_list_string) == FAILURE) {
        return;
    }\n\n
EOD;

		if ($func['return'] != 'void') {
			echo "    $retval_name = $func[name]($arg_list_string);\n\n";
			echo '    ', $this->_formatTypeConv($this->typemap[$func['return']]['from'], $retval_name, 'return_value'), "\n";
		} else {
			echo "    $func[name]($arg_list_string);\n";
		}

		echo "}\n\n";

        $func_source = ob_get_contents();
        ob_end_clean();

        return $func_source;
    }

	function _formatTypeConv($type_conv, $arg, $var)
	{
		$type_conv = str_replace('$arg', $arg, $type_conv);
		$type_conv = str_replace('$var', $var, $type_conv);
		return $type_conv;
	}

}
?>
